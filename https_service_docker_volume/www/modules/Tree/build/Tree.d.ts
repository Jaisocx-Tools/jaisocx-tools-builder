import { LargeDomEventEmitter } from '@jaisocx/event-emitter';
import { TemplateRenderer } from "@jaisocx/template-renderer";
import { ITreeRenderRetValue, IRenderTemplateRendererData } from './Types';
import { TreeMetadata } from './TreeMetadata';
export declare class Tree extends LargeDomEventEmitter {
    mainHtmlNodeId: string;
    mainHolderHtmlNode: HTMLElement | null;
    data: any | null;
    renderingMode: number;
    url: string | null;
    isModifiable: boolean;
    metadata: TreeMetadata;
    templateRenderer: TemplateRenderer;
    contextMenuJSClass: any;
    subtreeLength: number;
    subtreeLengthDeep: number;
    nodesWithIcons: boolean;
    constructor();
    setDebug(debug: boolean): Tree;
    setNodesWithIcons(withIcons: boolean): Tree;
    setUrl(url: string | null): Tree;
    setMainHtmlNodeId(mainHtmlNodeId: string): Tree;
    setMetadata(metadata: TreeMetadata): Tree;
    setModifiable(isModifiable: boolean): Tree;
    setRenderingMode(mode: number): Tree;
    load(url: string | null): Tree;
    getDataType(value: any): string;
    getInModeMetadataDataNodeIsTreeItem(node: object): boolean;
    render(nodes: any): this;
    renderSubtree(subtreeNodes: any, subtreeNodesHolderDataType: string, subtreeHtmlHolder: HTMLElement): {
        currentNodeSubtreeLength: number;
        subtreeJsonNodesLength: number;
        subtreeNodes: any;
    };
    updateDataNodeIdAndPath(node: any, holder: HTMLElement): any;
    checkDataNodeSubtree(node: any): {
        subtreeNodeDataType: string;
        hasSubtree: boolean;
        subtreeJsonNodes: any;
    };
    renderOneTreeNode(node: any, holder: HTMLElement): ITreeRenderRetValue;
    getDataForRendering(node: any): IRenderTemplateRendererData;
    getDataForRenderingEase(node: any, nodeHasSubtree: boolean): IRenderTemplateRendererData;
    getTreeNodeCssClasses(node: any): string;
    escapeHTMLForAttribute(str: string): string;
    unescapeHTMLFromAttribute(str: string | undefined): string;
    getTreeHtmlNodeDatasetJson(htmlNode: HTMLElement | null): string;
    addJSTreeEventListener(eventName: string, eventHandler: CallableFunction): Tree;
    addJSTreeEventListeners(): Tree;
    openButtonClickHandler(eventPayload: any): void;
    treeNodeLableClickHandler(eventPayload: any): void;
    contextMenuRender(eventPayload: any): void;
}
